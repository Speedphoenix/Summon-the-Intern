pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
function _init()

	mode = "start"
	sqrt_inv_2 = 1 / sqrt(2)
	
	startx, starty = find_tile(32)
	startx *= 8
	starty *= 8
	
	paper_sp = 58
	interact_distance_sq = 8 * 8

	player = {
		sp = 1,
		x = startx,
		y = starty,
		h = 8,
		w = 8,
		dx = 0,
		dy = 0,
		acc = 0.8,
		stop_fric = .1,
		fast_fric = 0.7,
		max_d = 1.5, -- can still go beyond with acc
		flipx = true,
		running = false,
		
		carrying = 0,
		
		anim_acc = 0,
	 anim_delay = 6,
	 anim_run_delay = 3,
	 anim_frame = 0,
	 
	 idle_frames = {1, 2, 3},
	 run_frames = {4, 5, 6, 7},
	}
	
	neutral_quotes = {
		"...",
		"come here",
		"intern, please",
	}
	negative_quotes = {
		"faster, boy",
		"will it be today?",
		"hurry up!",
		"stop taking breaks",
	}

	summoners = find_flags(1)
	for i, s in ipairs(summoners) do
	 s.anim_delay = 20
		s.anim_acc = flr(rnd(s.anim_delay))
		s.anim_dial_delay = 2
	 s.anim_frame = flr(rnd(2))
	 s.idle_frames = { s.sp, s.sp + 1 }
		s.dial_frames = { s.sp + 2, s.sp + 3}
	 s.flipx = false
	 s.stackx = -1
	 s.stacky = -1
	 s.x = s.tx * 8
	 s.y = s.ty * 8
	 s.dialog = nil
		mset(s.tx, s.ty, 0)
	end
end



function _update()

	if mode =="game" then update_game()
	elseif mode == "start" then update_start()
	elseif mode == "end" then update_end() end

end



function _draw()

	if mode =="game" then draw_game()
	elseif mode == "start" then draw_start()
	elseif mode == "end" then draw_end() end

	print(player.running, 0, 0, 0)
	
	local speedsq = player.dx * player.dx + player.dy * player.dy
	local speed = sqrt(speedsq)
	print(speed)
	
--	for index, s in ipairs(summoners) do
--	
--		print("".. index .. " " .. s.stackx .. " " .. s.stacky)
--	end
--	if lastsummonable != nil then
--		print(lastsummonable.stackx)
--	else
--		print(nil)
--	end
--	print(last_t)
end


-->8
--  custom function

function update_player()
	ldx = 0
	ldy = 0
	
	local lx=player.x
	local ly=player.y

	if btn(‚¨ÖÔ∏è) then ldx -= 1 player.flipx = true end
	if btn(‚û°Ô∏è) then ldx += 1 player.flipx = false end
	if btn(‚¨ÜÔ∏è) then ldy -= 1 end
	if btn(‚¨áÔ∏è) then ldy += 1 end 		

	if ldx == 0 then
		player.dx *= player.stop_fric
 end
	if ldy == 0 then
		player.dy *= player.stop_fric
	end
	
	if ldx != 0 and ldy != 0 then
		ldx *= sqrt_inv_2
		ldy *= sqrt_inv_2
	end
	
	
	player.dx += ldx * player.acc
	player.dy += ldy * player.acc
		 
 local speedsq = player.dx * player.dx + player.dy * player.dy
 if speedsq > player.max_d * player.max_d then
 	local speed = sqrt(speedsq)
 	local news = speed * player.fast_fric
 	if news < player.max_d then
 		news = player.max_d
 	end
 	local ratio = news / speed
 	player.dx *= ratio
 	player.dy *= ratio
 end

-- if abs(player.dx) > player.max_d then
-- 	if player.dx > 0 then
--  	player.dx = player.max_d
--  else
--   player.dx = player.max_d * -1
-- 	end
-- end
-- 
-- if abs(player.dy) > player.max_d then
-- 	if player.dy > 0 then
--  	player.dy = player.max_d
--  else
--   player.dy = player.max_d*-1
-- 	end
-- end

 if abs(player.dx) < 0.05 then
 	player.dx = 0
 end
 if abs(player.dy) < 0.05 then
 	player.dy = 0
	end
 
 player.x += player.dx
 player.y += player.dy
 
 player.running = player.dx != 0 or player.dy != 0

 -- check interactions
 if btn(üÖæÔ∏è) then
 	for i, s in ipairs(summoners) do
 		local distx = s.x - player.x
 		local disty = s.y - player.y
 		local distsq = distx * distx + disty * disty
 		if s.stackx >= 0
 			and distsq <= interact_distance_sq then
				do_interact(s)
 		end
 	end
 end
 
     --check collision
    if player.dx>0 then

        if collide_map(player,"right", 0) then
            player.dx=0
            player.x=lx
        end
    end
        
    if player.dx<0 then
        if collide_map(player,"left",0) then
            player.dx=0
            player.x=lx  
        end
    end
    
    if player.dy<0 then
        if collide_map(player,"up",0) then
            player.dy=0
            player.y=ly
        end
    end
    
    if player.dy>0 then
        if collide_map(player,"down",0) then
            player.dy=0
            player.y=ly
        end
    end      

end

function collide_map(obj,aim,flag)

    local x1=0
    local y1=0
    local x2=0
    local y2=0

    local x=obj.x local y=obj.y local w=obj.w local h=obj.h

    if aim=="left" then
        x1=x+1   y1=y+2
        x2=x+2    y2=y+h-3
    elseif aim=="right" then
        x1=x+w-2   y1=y+2
        x2=x+w-1  y2=y+h-3
    elseif aim=="up" then
        x1=x+5    y1=y-1
        x2=x+w-5  y2=y
    elseif aim=="down" then
        x1=x+3      y1=y+h-1
        x2=x+w-4    y2=y+h+obj.dy/4
    end

    --pixel to tiles
    x1=x1/8  x2/=8  y1/=8  y2/=8

    local a= fget(mget(x1,y1), flag) 
    local b= fget(mget(x1,y2), flag) 
    local c= fget(mget(x2,y1), flag) 
    local d= fget(mget(x2,y2), flag)

    if a or b or c or d then
        is_collide=true
        return true
    else
        is_collide=false
        return false
    end


end


function anim_player(obj)

	local frames = obj.idle_frames
	local delay = obj.anim_delay
 if obj.running then
 	frames = obj.run_frames
 	delay = obj.anim_run_delay
 elseif obj.dialog != nil then
 	frames = obj.dial_frames
 	delay = obj.anim_dial_delay
 end
 
	obj.anim_acc -= 1
 if obj.anim_acc <= 0 then --si anim_play atteint 0, reset compteur a rebour a anim_spd   
  obj.anim_acc = delay
  obj.anim_frame += 1
 end
 
 if obj.anim_frame > count(frames) then
  obj.anim_frame = 1
 end
 obj.sp = frames[obj.anim_frame]
end

function find_tile(n)
	for i = 0, 16 do
		for j = 0, 16 do
			if mget(i, j) == n then
				return i, j
			end
		end
	end
	return nil
end

function find_flags(f)
	local ret = {}
	for i = 0, 16 do
		for j = 0, 16 do
			local t = mget(i, j)
			if fget(t, f) then
				add(ret, {
					tx = i,
					ty = j,
					sp = t,
				})
			end
		end
	end
	return ret
end

function shuffle(arr)
	local len = count(arr)
	for i = 0, (len - 2) do
		local r = 1 + flr(rnd(len - i))
		local inter = arr[len - i]
		arr[len - i] = arr[r]
		arr[r] = inter
	end
end
function pick_rnd(arr)
	local i = 1 + flr(rnd(count(arr)))
	return arr[i]
end
-->8
-- update main menu

function update_start()



 if btnp(‚ùé) or btnp(üÖæÔ∏è) then 
  startgame()  
  mode="game"
 end
 
end
-->8
-- update game

function update_game()
 if btnp(‚ùé) and btnp(üÖæÔ∏è)
 then mode="end" end
 
 update_player()
 update_summons()
 anim_player(player)
 for i, s in ipairs(summoners) do
 	anim_player(s)
 end
 
end


function startgame()
	player.x = startx
	player.y = starty
	
	summon_delay = 150
	next_summon = summon_delay
end

function get_summonable()
	for index, s in ipairs(summoners) do
		if s.stackx < 0 then
			for i = -1, 1 do
				for j = -1, 1 do
					if i == 0 and j == 0 then
					else
						local t = mget(s.tx + i, s.ty + j)
						local deco = mget(s.tx + i + 16, s.ty + j)
						if fget(t, 2) and deco <= 0 then
							local px = s.tx + i
							local py = s.ty + j
							return s, px, py
						end
					end
				end
			end
		end
	end
	return nil
end

function update_summons()
	for i, s in ipairs(summoners) do
		if s.stackx >= 0 then
			s.summon_time += 1
		end
	end

	next_summon -= 1
	if next_summon <= 0 then
		next_summon = summon_delay
		shuffle(summoners)
		local s, px, py = get_summonable()
		lastsummonable = s
		if s != nil then
			do_summon(s, px, py)
			mset(s.stackx + 16, s.stacky, paper_sp)
		end
	end
end

function do_summon(s, stackx, stacky)
	s.stackx = stackx
	s.stacky = stacky
	s.summon_time = 0
	s.dialog = {
		x = s.x,
		y = s.y - 16,
		txtcol = 0,
		bgcol = 7,
		txt = pick_rnd(neutral_quotes),
		dur = 45,
		curlen = 1,
		lapse = 0,
		csfx = flr(rnd(2)),
	}
end

function do_interact(s)
	player.carrying += 1
	mset(s.stackx + 16, s.stacky, 0)
	s.stackx = -1
	s.stacky = -1
	s.dialog = nil
end


-->8
-- update end menu

function update_end()

 if btnp(‚ùé) or btnp(üÖæÔ∏è)
 then mode="start" end
 
end
-->8
-- draw main menu

function draw_start()

	cls(3)

end
-->8
-- draw game

function draw_game()

	cls(13)
	map(0,0)
	map(16,0)
	
	for i, s in ipairs(summoners) do
		draw_entity(s)
	end

	draw_entity(player)
	
	for i, s in ipairs(summoners) do
		if s.dialog != nil then
			draw_dialog(s.dialog)
			local dur = s.dialog.dur
			if s.dialog.lapse > dur then
				s.dialog = nil
			end
		end
	end
end

function draw_entity(obj)
		spr(obj.sp, obj.x, obj.y, 1, 1, obj.flipx)
		if obj.carrying != nil and obj.carrying > 0 then
			local offx = 6
			if obj.flipx then
				offx = -2
			end
			rectfill(obj.x + offx,
					obj.y + 4 - obj.carrying + 1,
					obj.x + offx + 3,
					obj.y + 4,
					6
			)
			rectfill(obj.x + offx,
					obj.y + 4 - obj.carrying - 2,
					obj.x + offx + 3,
					obj.y + 4 - obj.carrying,
					7
			)
		end
end

function draw_dialog(d)
	local len = #d.txt
	local twidth = print(d.txt, 0, -100)
	local theight = 5
	pal(7, d.bgcol)
	
	
	rectfill(d.x + 3,
			d.y - 5,
			d.x + twidth,
			d.y + theight + 3,
			7
		)
	spr(48, d.x - 2, d.y - 5)
	spr(49, d.x + twidth, d.y - 5)
	spr(50, d.x - 2, d.y + theight - 4)
	spr(51, d.x + twidth, d.y + theight - 4)

	if d.curlen <	len then
		d.curlen += 1
		sfx(d.csfx)
	else
		d.lapse += 1
	end

	for i = 1, d.curlen do
		print(d.txt[i], d.x + i * 4, d.y, d.txtcol)
	end
 --	print(d.txt, d.x, d.y, d.txtcol)
	-- print(d.txt, 0, 0)
	pal(0)
end
-->8
-- draw end menu

function draw_end()
	cls(8)

end
__gfx__
0000000000099900000999000000000000099900000000000009990000000000000099900000000000000000000000000d555555555555d00000000000000000
000000000009fc000009fc00000999000009fc00000999000009fc000009990000009fc0000099900000999000000000d51111111111115d0000000000000000
00700700000fff00000fff000009fc00000fff000009fc00000fff000009fc000010fff000109fc000009fc0000000000d555555555555d00000000000000000
000770000004880000048800000fff0000088400000fff0000448800000fff00001184800011fff00011ff4f0000000000000000000000000000000000000000
000770000004f8000004880000048800000884f00008480000f88800000848000001884f0001844f000184800000000000000000000000000000000000000000
00700700000888000004f8000004f8000008880000084f000008880000084f000001116600011166000111660000000000000000000000000000000000000000
00000000000605000008880000088800006605000006600000550600000560000000010600000106000001060000000000000000000000000000000000000000
00000000000605000006050000060500000005000000500000000600000060000000101000001010000010100000000000000000000000000000000000000000
00011100000099900000000000000000000099900555000000000000000000000555000000000000000000000000000009090000090900000909000009090000
011155500000ff3000009990000099900000ff300145500005550000055500000145500000000000000000000000000009990000099900000999000009990000
055566500010fff00010ff300010ff300010ffe00444010001455100014551000e44010000000000000000000000000005990000059900000599000005990000
05555550001131300011fff00011fff0001131300313110004441100044411000313110000000000000000000000000009994000099940000999400009994000
555555500001331f0001311f0001311f0001331f4133100041131000411310004133100000000000000000000000000009999400099994000999940009999400
5555555000011155000111550001115500011155551110005511100055111000551110000000000000000000000000000f9f99400f9f94000f9f99400f9f9940
00600600000001050000010500000105000001055010000050100000501000005010000000000000000000000000000000000040000004000000004000000040
00600600000010100000101000001010000010100101000001010000010100000101000000000000000000000000000000000040000040000000004000000004
00005000000000000000000000000000000000000044400000000000000000000044400000000000000000000000000000000000880000880000000000000000
0000500000000000000000000000000000088800004440000044400000444000004f10f000000000000000000000000008800880800000080000000000000000
000050000008880000000000000888000044480000fff00000444000004f100000ffe03000000000000000000000000008000080000000000000000000000000
05551000004448000008880000444800000cfc000311130000111000001110000311130000000000000000000000000000000000000000000000000000000000
05551000000cfc0000444800000cfc00000fef0f0011100003111300031113000011100000000000000000000000000008000080000000000000000000000000
01110000000fff00000cfc00000fff00000311300055500000555000005550000055500000000000000000000000000008800880800000080000000000000000
0010000000031300000fff0000031100000311000001000000010000000100000001000000000000000000000000000000000000880000880000000000000000
01010000000f1f00000f1f00000f11f0000f11000010100000101000001010000010100000000000000000000000000000000000000000000000000000000000
00000111111000001777777777777771000000000000d00000000000000d00000000000000000000000000000000000000000000000000000000000000000000
00011777777110001777777777777771000000000000d00000000000000d00000dddddd000000000007777000000000000000000000000000000000000000000
0017777777777100177777777777777100000000000dd0000dddddd0000dd0000dddddd000000000007777000000000000000000000000000000000000000000
01777777777777100177777777777710000000000005d0000d1111d0000d50000dd55dd000000000007777000000000000000000000000000000000000000000
01777777777777100177777777777710000000000055d0000d1111d0000d55000dd51dd000000000006666000000000000000000000000000000000000000000
1777777777777771001777777777710000000000005500000dddddd0000055000055150000000000000000000000000000000000000000000000000000000000
17777777777777710001177777711000000000000000000000555500000000000000100000000000000000000000000000000000000000000000000000000000
17777777777777710000011111100000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000
444444444444444401000000000000100000000000000000000000000000000000000000899999aa99999999aaaaaaa866666666766666666666666666666667
4444444446644664010000000000001000000000667770000066777700000000000000009944444444444444444444aa77777777767777777777777777777767
444444444644446400000000000000000000000055777100001677770000000000000000a4411111111111111111144a77cccc77766777777777777777777667
44444444444444440000000000000000000000006677701001667777000000000000000094111111111111111111114a77cccc77766677777777777777776667
44444444464444640000000000000000000000006677701010667777000000000000000094111111111111111111114977cccc77766667777777777777766667
44444444466446640000000000000000000000006877701010667777000000000000000094111111111111111111114977dddd77766666777777777777666667
44444444444444440000000000000000000000006677701110667777000000000000000094111111111111111111114977777777766666677777777776666667
44444444444444440000000000000000000000000000000000000000000000000000000094111111111111111111114955555555766666655555555556666667
444444444444444401000010000000000000000003b33b30000003b3000000000000000094111111111111111111114966666666766666657666666556666667
44444444466446640100001000000000000000003b33b3b300003333000000000000000094111111111111111111114977777777766666657766666556666667
44444444464444640000000000000000000000003303b33303b33000000b00000000000094111111111111111111114977777777766666657776666556666667
44444444444444440000000000000000000000000003b03303330000000300000000000094111111111111111111114977777777766666657777666556666667
44444444464444640000000000000000000000000093390000030000000500000000000094111111111111111111114977777777766666657777766556666667
44444444466446640000000000000000000000000099990000939000000000000000000094411111111111111111114977777777766666657777776556666667
44444444444444440000000000000000000000000044440000999000000000000000000099444444444444444444449944444444766666657777777556666667
55555555555555550000000000000000000000000044440000444000000000000000000089999999999999999999999844444444766666655555555556666667
44444444000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076000000766556655666666756655667
4aa44aa4000000000000000000000000000000000000000000000000000000000000000000000000000000066166000076660000766445655666666756544667
4a4444a4000000000000000000000000000000000000000000000000000000000000000000000000000006777177760076666600766441555666666755144667
44444444000000000000000000000000000000000000000000000000000000000000000000000000000067777777776076666665766444455666666754444667
4a4444a40000000000000000000000000000000000000000000000000000000000000000000000000000777777777770766666dd766444445666666744444667
4aa44aa400080000000000000000000000000000000000000000000000000000000000000000000000067777777777767666dddd766644445666666744446667
44444444000000000000000000000000000000000000000000000000000000000000000000000000000677777777777676dddddd766664445666666744466667
44444444000000000000000000000000000000000000000000000000000000000000000000000000000117777177771176666666766666647777777746666667
00000000000000000000000000000000000000000000000000000000000000000000000000000000000677777777777611111111766666650000000056666667
00000000000000000000000000000000000000000000000000000000000000000000000000000000000677777777777611111111766666655555555556666667
00000000000000000000000000000000000000000000000000000000000000000000000000000000000077777777777011111111766666dddddddddddd666667
0000000000000000000000000000000000000000000000000000000000000000000000000000000000006777777777601111111176666dddddddddddddd66667
000000000000000000000000000000000000000000000000000000000000000000000000000000000000067771777600111111117666dddddddddddddddd6667
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000066166000011111111766dddddddddddddddddd667
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111176dddddddddddddddddddd67
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111766666666666666666666667
__gff__
0000000000000000030303000000000000030303030303030300000000000000000303030303030303000000151510100000000000000000000000001010101001050000000101000001010111111111010500000001010000010101111111110101000000000000000000000101010100000000000000000000000001010101
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
494a4a4a4a4a4a4a4a4a4a4a4a4a4a4b6a6b0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
595a5a5a5a5a5a5a5a5a5a5a5a5a5a5b7a7b0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4d4e5c5c4e4e4c4e4e4e4e4c4e5c4e4f10101010000010001010101000001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d00505100405050410056000041005f10000000000000360000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d00250000500011500000001150005f10004243003500000000000000370010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6d00000000520000520000000052006f10000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d00004150504100000050500000005f10000000003600000000350000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d00114042255000000042250060005f10000037000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d00004000005200000000000040205f10000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6d000040150000004d4e4e4e4e4e4e4f10000000350000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d000051000041005d4015000000215f1000000000000000001c000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d000052001150005d5150500051505f10000000000000000038005700003810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d001140002152005d4243430042435f10000037000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d000051505000005e0000000000215f10000000383900000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d55004242430000000000560000505f10000000000000000000000000003810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
7d7e7e7e7e7e7e7e7e7e7e7e7e7e7e7f10101010101010101010101010105210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000100000b55009530065200000000000000000000000000000000000000000000000000000000000001f70000000000000000000000000000000000000000000000000000000000000000000000000000000000
00010000050200d030150500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000100000204001020000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00020000117100d71000700006000c0001300011000100000c0001300011000046000160001600110000c710117101070011000100000c0000d700107001370008600076000c0000c0000c000130001100010000
